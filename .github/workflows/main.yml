name: Setup Proxy Machine

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 */5 * * *'  # Runs every 5 hours

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout repository (Safe Mode)
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone to avoid object issues
          clean: true

      - name: üîÑ System & Python setup
        run: |
          sudo apt update && sudo apt install -y python3 python3-pip python3-venv curl netcat-traditional

      - name: üè∞Ô∏è Python Virtual Environment
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install --upgrade pip
          test -f requirements.txt && pip install -r requirements.txt

      - name: üöÄ Start proxy server
        run: |
          source env/bin/activate
          nohup python3 start.py > start.log 2>&1 &
          sleep 15  # Increased initialization time

      - name: üîë Git configuration
        run: |
          git config --global user.name "neganok"
          git config --global user.email "hackersvn1@gmail.com"
          git config --global pull.rebase false

      - name: üîÑ Proxy Update Engine
        run: |
          set -e
          mkdir -p Proxies
          
          # Stable proxy download function
          download_proxy() {
            local type=$1
            local tmp_file="Proxies/${type}.tmp"
            
            for attempt in {1..3}; do
              if curl -s --connect-timeout 15 "http://127.0.0.1:8000/proxy/${type}?time=2&minutes=10&format=text" -o "$tmp_file" && 
                 [ -s "$tmp_file" ]; then
                mv "$tmp_file" "Proxies/${type}.txt"
                echo "‚úÖ Successfully downloaded $type proxies"
                return 0
              fi
              sleep 5
            done
            echo "‚ùå Failed to download $type proxies after 3 attempts"
            return 1
          }

          # Atomic Git synchronization
          git_sync() {
            # Create fresh working directory
            temp_dir=$(mktemp -d)
            cd $temp_dir
            
            git init
            git remote add origin "https://github.com/$GITHUB_REPOSITORY.git"
            git config user.name "neganok"
            git config user.email "hackersvn1@gmail.com"
            
            # Fetch latest changes
            git fetch origin main --depth=1
            git reset --hard FETCH_HEAD
            
            # Copy updated files
            mkdir -p Proxies
            cp -r $GITHUB_WORKSPACE/Proxies/* Proxies/ 2>/dev/null || true
            [ -f "$GITHUB_WORKSPACE/data.db" ] && cp "$GITHUB_WORKSPACE/data.db" . || true
            
            # Commit and push if changes exist
            git add -A
            if ! git diff --cached --quiet; then
              git commit -m "üîÑ Proxy update $(date +'%Y-%m-%d %H:%M:%S')"
              git push origin main
              echo "‚úÖ Successfully pushed updates"
            else
              echo "‚ÑπÔ∏è No changes to push"
            fi
            
            # Cleanup
            cd $GITHUB_WORKSPACE
            rm -rf $temp_dir
          }

          # Main update loop
          for cycle in {1..300}; do
            echo "üîÑ [Cycle $cycle/300] Starting update process..."
            
            # Check proxy server status
            if ! nc -z -w 10 127.0.0.1 8000; then
              echo "‚ùå Proxy server not ready, waiting 30 seconds..."
              sleep 30
              continue
            fi

            # Download all proxy types
            for proxy_type in http https socks4 socks5; do
              download_proxy $proxy_type || true
            done

            # Sync with GitHub every 3 cycles
            if (( cycle % 3 == 0 )); then
              echo "üíæ Synchronizing with repository..."
              git_sync || echo "‚ö†Ô∏è Sync failed, will retry next cycle"
            fi
            
            sleep 60
          done

      - name: üßπ Cleanup
        if: always()
        run: |
          pkill -f "python3 start.py" || true

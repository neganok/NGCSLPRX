name: Setup Proxy Machine

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 */5 * * *'

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout repository (Force Refresh)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          clean: true
          persist-credentials: true

      - name: üîÑ C√†i ƒë·∫∑t h·ªá th·ªëng
        run: |
          sudo apt update && sudo apt install -y python3 python3-pip python3-venv curl netcat-traditional

      - name: üè∞Ô∏è Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install --upgrade pip
          test -f requirements.txt && pip install -r requirements.txt

      - name: üöÄ Kh·ªüi ƒë·ªông proxy (Guaranteed)
        run: |
          source env/bin/activate
          pkill -f "python3 start.py" || true
          nohup python3 start.py > start.log 2>&1 &
          sleep 25

      - name: üîë C·∫•u h√¨nh Git (Strict)
        run: |
          git config --global user.name "neganok"
          git config --global user.email "hackersvn1@gmail.com"
          git config --global init.defaultBranch main
          git config --global pull.rebase false
          git config --global core.autocrlf false

      - name: üîÑ Proxy & Data Sync (100% Working)
        run: |
          set -ex
          mkdir -p Proxies

          # H√†m t·∫£i proxy ƒë·∫£m b·∫£o
          download_proxy() {
            local type=$1
            rm -f "Proxies/${type}.txt" 2>/dev/null || true
            
            for i in {1..5}; do
              if curl -s --connect-timeout 25 --retry 3 "http://127.0.0.1:8000/proxy/${type}?time=2&minutes=10&format=text" -o "Proxies/${type}.tmp" && 
                 [ -s "Proxies/${type}.tmp" ]; then
                mv "Proxies/${type}.tmp" "Proxies/${type}.txt"
                echo "‚úÖ [$type] T·∫£i th√†nh c√¥ng"
                return 0
              fi
              sleep 10
            done
            echo "‚ùå [$type] Th·∫•t b·∫°i sau 5 l·∫ßn"
            return 1
          }

          # H√†m ƒë·ªìng b·ªô ch·∫Øc ch·∫Øn
          force_push() {
            # ƒê·∫£m b·∫£o workspace s·∫°ch
            git reset --hard
            git clean -fd
            
            # Th√™m file proxy v√† data.db
            find Proxies -type f -name "*.txt" -size +0 | xargs git add 2>/dev/null || true
            [ -f "data.db" ] && git add data.db || true
            
            # Ki·ªÉm tra thay ƒë·ªïi th·ª±c s·ª±
            if git diff --cached --quiet; then
              echo "‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi th·ª±c s·ª±"
              return 0
            fi

            # T·∫°o commit m·ªõi
            git commit -m "üîÑ Proxy Update $(date +'%Y-%m-%d %H:%M:%S')"
            
            # ƒê·ªìng b·ªô v·ªõi remote
            for i in {1..5}; do
              git fetch origin
              if git pull origin main --allow-unrelated-histories; then
                if git push origin main; then
                  echo "üöÄ ƒê√£ push th√†nh c√¥ng"
                  return 0
                fi
              fi
              echo "‚ö†Ô∏è L·ªói ƒë·ªìng b·ªô (l·∫ßn $i/5), ƒëang reset..."
              git reset --hard origin/main
              git clean -fd
              sleep 15
            done
            
            echo "‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô sau 5 l·∫ßn"
            return 1
          }

          # V√≤ng l·∫∑p ch√≠nh
          for cycle in {1..300}; do
            echo "üîÑ CHU K·ª≤ $cycle/300 [$(date +'%H:%M:%S')]"
            
            # Ki·ªÉm tra proxy server
            if ! nc -z -w 20 127.0.0.1 8000; then
              echo "‚ùå Proxy kh√¥ng ph·∫£n h·ªìi, kh·ªüi ƒë·ªông l·∫°i..."
              pkill -f "python3 start.py" || true
              source env/bin/activate
              nohup python3 start.py > start.log 2>&1 &
              sleep 30
              continue
            fi

            # T·∫£i proxy
            any_success=false
            for type in http https socks4 socks5; do
              if download_proxy "$type"; then
                any_success=true
              fi
            done

            # ƒê·ªìng b·ªô n·∫øu c√≥ thay ƒë·ªïi
            if [ "$any_success" = true ] || [ -f "data.db" ]; then
              force_push || echo "‚ö†Ô∏è Ti·∫øp t·ª•c d√π ƒë·ªìng b·ªô th·∫•t b·∫°i"
            fi
            
            sleep 60
          done

      - name: üßπ D·ªçn d·∫πp (Guaranteed)
        if: always()
        run: |
          pkill -f "python3 start.py" || true
          rm -f start.log

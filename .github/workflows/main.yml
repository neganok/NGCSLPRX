name: Setup Proxy Machine

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 */5 * * *'

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout repository (Enhanced)
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          clean: true
          persist-credentials: true

      - name: üîÑ C√†i ƒë·∫∑t h·ªá th·ªëng
        run: |
          sudo apt update && sudo apt install -y python3 python3-pip python3-venv curl netcat-traditional

      - name: üè∞Ô∏è Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install --upgrade pip
          test -f requirements.txt && pip install -r requirements.txt

      - name: üöÄ Kh·ªüi ƒë·ªông proxy (Robust)
        run: |
          source env/bin/activate
          pkill -f "python3 start.py" || true
          nohup python3 start.py > start.log 2>&1 &
          sleep 20

      - name: üîë C·∫•u h√¨nh Git
        run: |
          git config --global user.name "neganok"
          git config --global user.email "hackersvn1@gmail.com"
          git config --global init.defaultBranch main
          git config --global pull.rebase false

      - name: üîÑ Proxy Update System (Ultra Stable)
        run: |
          set -e
          mkdir -p Proxies

          # Enhanced proxy download with cleanup
          download_proxy() {
            local type=$1
            rm -f "Proxies/${type}.txt" 2>/dev/null || true
            
            for i in {1..5}; do
              if curl -s --connect-timeout 20 --retry 3 "http://127.0.0.1:8000/proxy/${type}?time=2&minutes=10&format=text" -o "Proxies/${type}.tmp" && 
                 [ -s "Proxies/${type}.tmp" ]; then
                mv "Proxies/${type}.tmp" "Proxies/${type}.txt"
                echo "‚úÖ [$type] Downloaded successfully"
                return 0
              fi
              sleep 10
            done
            echo "‚ùå [$type] Failed after 5 attempts"
            return 1
          }

          # Atomic Git sync
          git_sync() {
            # Reset workspace completely
            git reset --hard
            git clean -fd
            
            # Add only valid files
            find Proxies -type f -size +0 | xargs git add 2>/dev/null || true
            [ -f "data.db" ] && git add data.db || true
            
            if ! git diff --cached --quiet; then
              git commit -m "üîÑ Proxy update $(date +'%Y-%m-%d %H:%M:%S')"
              
              # Force sync with remote
              for i in {1..5}; do
                if git pull origin main --allow-unrelated-histories && 
                   git push origin main; then
                  echo "üöÄ Synced successfully"
                  return 0
                fi
                echo "‚ö†Ô∏è Sync failed (attempt $i/5), retrying..."
                git reset --hard origin/main
                git clean -fd
                sleep 15
              done
              echo "‚ùå Failed to sync after 5 attempts"
              return 1
            else
              echo "‚ÑπÔ∏è No changes to sync"
              return 0
            fi
          }

          # Main loop with health checks
          for cycle in {1..300}; do
            echo "üîÑ CYCLE $cycle/300 [$(date +'%H:%M:%S')]"
            
            # Verify proxy server
            if ! nc -z -w 15 127.0.0.1 8000; then
              echo "‚ùå Proxy server down, restarting..."
              pkill -f "python3 start.py" || true
              source env/bin/activate
              nohup python3 start.py > start.log 2>&1 &
              sleep 30
              continue
            fi

            # Download all proxy types
            any_success=false
            for type in http https socks4 socks5; do
              if download_proxy "$type"; then
                any_success=true
              fi
            done

            # Sync only if at least one proxy downloaded
            if [ "$any_success" = true ] || [ -f "data.db" ]; then
              git_sync || echo "‚ö†Ô∏è Continuing despite sync failure"
            fi
            
            sleep 60
          done

      - name: üßπ Cleanup
        if: always()
        run: |
          pkill -f "python3 start.py" || true
          rm -f start.log
